# -*- coding: utf-8 -*-
"""modelling_tuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jPVxhwKHPg8wYzjDLugqMBJxlSagNPpp
"""

!pip install mlflow scikit-learn pandas matplotlib seaborn

pip install python-dotenv

!pip install dagshub

pip install joblib

import pandas as pd
import numpy as np
import json
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
import warnings

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix
from xgboost import XGBClassifier

import mlflow
from dagshub import init

warnings.filterwarnings("ignore")


init(repo_owner="hubbiy18", repo_name="Eksperimen_SML_Febie-Elfaladonna", mlflow=True)
mlflow.set_experiment("wine_quality_multi_xgb")


url = "https://raw.githubusercontent.com/hubbiy18/Eksperimen_SML_Febie-Elfaladonna/main/preprocessing/winequality_red_preprocessed.csv"
df = pd.read_csv(url)

label_encoder = LabelEncoder()
y = label_encoder.fit_transform(df["quality"])
X = df.drop("quality", axis=1)


label_mapping = {str(int(k)): int(v) for k, v in zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_))}
with open("label_classes.json", "w") as f:
    json.dump(label_mapping, f)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

param_grid = {
    "max_depth": [3, 5],
    "learning_rate": [0.1, 0.01],
    "n_estimators": [100, 150]
}

xgb = XGBClassifier(
    objective="multi:softmax",
    num_class=len(label_encoder.classes_),
    use_label_encoder=False,
    eval_metric="mlogloss",
    verbosity=0
)

grid_search = GridSearchCV(estimator=xgb, param_grid=param_grid, cv=3, scoring="accuracy", verbose=1)
grid_search.fit(X_train, y_train)


best_model = grid_search.best_estimator_
y_pred = best_model.predict(X_test)


cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=label_encoder.classes_,
            yticklabels=label_encoder.classes_)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.tight_layout()
plt.savefig("confusion_matrix.png")
plt.close()

report = classification_report(
    y_test, y_pred,
    target_names=[str(c) for c in label_encoder.classes_],
    zero_division=0,
    output_dict=True
)

with open("classification_report.json", "w") as f:
    json.dump(report, f)


with mlflow.start_run():
    mlflow.log_params(grid_search.best_params_)
    mlflow.log_metric("accuracy", grid_search.best_score_)


    joblib.dump(best_model, "model.pkl")
    mlflow.log_artifact("model.pkl")


    mlflow.log_artifact("label_classes.json")
    mlflow.log_artifact("confusion_matrix.png")
    mlflow.log_artifact("classification_report.json")

print("Model training dan tuning selesai. Semua warning telah diperbaiki.")